c:\vuejs 폴더를 생성 



환경설정
1. Nodejs 
- 10버전 이상

2. Visual Studio Code
cmd 창에서 
> node -v
> npm -v

2.1 vuejs vs code 플러그인

3. Chrome 브라우저에 App
: Vuejs Dev Tools
: Postman 

jQuery 라이브러리를 사용
CDN
<script src="xxx/jquery.min.js"></script>

React / Vuejs / Angular 
React : CRA(Create React App)
Vuejs : Vue-CLI (Command Line Interface)
Angular : Angular-CLI
- Source code(스켈레톤 코드)와 설정파일을 생성해주는 개발도구

1. 라이브러리 다운로드 방법의 변화
: npm, yarn 을 사용
  node_modules 폴더 아래에 js 다운로드 받아짐
- Bundling 해주는 도구가 필요가 필요하다 : Webpack 제공

2. 클라이언트 코드와 서버코드가 같은 프로젝트내에 있었음
Server Side Rendering
  - JSP, Thymeleaf 를 사용해서 서버에서 렌더링 해서 보내준다.

Client Side Rendering
 - Ajax 통신,  서버는 데이터(json)를 전달하고, 클라이언트에서 렌더링
- 클라이언트와 서버 별도의 프로젝트로 만들어서 개발한다. 
- 클라이언트를 위한 Dev Server(hot moudule replacment)  : webpack 제공

3. Javascript 컴파일러가 필요하다. 
React, Vuejs : ECMA Script6 를 사용
- Babel 컴파일러를 사용 , ES6 -> ES5 변환
- Babel Loader : webpack 제공
Angular : Typescript 사용
- tsc 컴파일러 사용 , ts -> es5 변환


MVVM 패턴, Virtual DOM
: 상태변수(state variable)를 선언하고(개발자), 그 변수와 html dom을 연결한다(개발자) - directive를 사용
 변수와 html dom 간의 동기화처리 (vuejs) - VM(ViewModel)
  - 동기화를 처리할 때 virtual dom 기법을 사용한다.
 vitual dom(가상돔), real dom(실제돔)

state management를 좀더 효율적으로 하기 위해서 vuex가 필요하다.

jquery
<script>
   $('#myInput').val('vuejs');
   $('#myInput').on('change', function(e) {
        e.target.value
   });
</script>

<input type='text' id='myInput' value="aaa">

Vue Directive (Javascript)
var app = new Vue({
  el:'#app',
  data:{
    name:'<i>Vuejs</i>',
    isFlag:false,
    value: 5,
    vuelogo: 'https://vuejs.org/images/logo.png',
    anglogo: 'https://angular.io/assets/images/logos/angular/angular.svg',
    todos: [{ text: 'Vue.js 튜토리얼 작성하기' },{ text: 'Webpack2 알아보기' },{ text: '사이드 프로젝트 진행하기' }],
  },  //data
  methods: {
    increment:function() {
      this.value++;
    },
    decrement() {
      this.value--;
    }
  }, //methods
});
------------------------------------------
Vue Directive(Template)
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>JS Bin</title>
</head>
<body>
<script src="https://unpkg.com/vue/dist/vue.js"></script>
<div id="app">
  <h2>value : {{value}} </h2>
  <button v-on:click="increment">증가</button>
  <button @click="decrement">감소</button>
  
  <input type="checkbox" v-model="isFlag">이미지변경  
  <img :src="isFlag?vuelogo:anglogo">
  <div v-if="value > 0">
   <input type="text" v-model="name"> 
  </div>
  <ul>
    <li v-for="(todo,index) in todos" :key="index">
      {{index}} - {{todo.text}}
    </li>
  </ul>  
 <h1>Hello, {{ name }}</h1>
  <span v-html="name" v-show="isFlag"></span>
</div>
</body>
</html>

----ECMA Script6 Source code
//var는 function scope이고, let은 block scope
var sum = 0;
for(let i = 1; i <= 5; i++) {
 sum = sum + i;
}
console.log(sum); //15
console.log(i); //6

//Arrow Function
function sayHello(msg) {
  return 'Hello ' + msg;
}

console.log(sayHello("Vuejs"));
//arrow function
let sayHello2 = msg => {return 'Hello ' + msg;};
console.log(sayHello2("뷰"));

let sayHello3 = msg => ('Hello ' + msg);
console.log(sayHello3("뷰제이에스"));

//map(), filter(), reduce() 함수 사용
let myArr = [10,20,40,60,70,80,100];
//map(function style)
let result = myArr.map((val,idx) => (val * idx));
console.log(result);
//forEach (consumer style)
//myArr.forEach(val => console.log(val));

//filter(predicate style)
let result2 = myArr.filter(val => val % 7 == 0);
console.log(result2);
//reduce (function(operator) style)
let result3 = myArr.reduce((prev,curr) => prev + curr);
console.log(result3);
//for-of
for(let val of myArr) {
  console.log(val);
}
//default parameter value
let volume = (l, w = 3, h = 4 ) => (l * w * h);
console.log(volume(2)); //output: 24

//Template Literals `` back tick
let host = 'aa.com';
let port = 8080;
let database = 'mydb';
const db = 'http://' + host + ':' + port + '/' + database;
console.log(db);

const db2 = `http://${host}:${port}/${database}`;
console.log(db2);

//DeStructuring Assignment 기본
let a, b, rest; 
[a, b] = [1, 2]; 
console.log(a);
console.log(b);

[a, b, ...rest] = [10, 20, 3, 4, 5];
console.log(a);
console.log(b);
console.log(rest);

//packing
let foo = ["one", "two", "three"]; 
//unpacking
let [foo1, foo2, foo3] = foo;
console.log(foo1);
console.log(foo2);
console.log(foo3);
//destructuring assignment - swapping
let a = 1; 
let b = 3; 
[a, b] = [b, a];
console.log(a);
console.log(b);
//객체분해
let obj = {p: 42, q: true}; 
let a = obj.p;
let b = obj.q;

let {p, q} = obj;
console.log(p);
console.log(q);

//Spread Operator
// joining arrays
const odd = [1, 3, 5];
const nums = [2 , ...odd, 4 , 6];//.concat(odd);
console.log(nums);

// cloning arrays
const arr = [1, 2, 3, 4];
const arr2 = [...arr];//arr.slice();
console.log(arr2);

const { a, b, ...z } = { a: 1, b: 2, c: 3, d: 4 };
console.log(a); // 1
console.log(b); // 2
console.log(z); // { c: 3, d: 4 } 
console.log(z.c);

//slice vs splice
let myArr = [10,20,30,40,50];

console.log(myArr.slice(2));
console.log(myArr);

let myArr2 = [10,20,30,40,50];

console.log(myArr2.splice(2));
console.log(myArr2);


Vue CLI로 Project를 생성
package.json 파일이 생성
"scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },

> npm start
//개발Dev server start하고, compile
> npm run serve

//port 번호 변경
npm run serve -- --port 8087

//운영에 배포(deploy) 하기 위한 작업
> npm run build

http://localhost:8081 요청하면
public/index.html (spa)
    <div id="app"></div>
           
src/main.js
 index.htm과 App.vue를 연결해주는 역할

src/App.vue
 Vuejs Root Component

src/HelloWorld.vue
 Vuejs Component

            main.js
index.html  -> App.vue -> HelloWorld.vue
       
부모컴포넌트가 자식컴포넌트에게 props를 전달할때 props의 name
부모 -> 자식 msg-title ( snake style )

자식 컴포넌트에서 사용할때는 msgTitle (camel style) 


개발 모드에서만 CORS 적용
- express 
  cors 의존성 설치
  const cors = require('cors');
  const app = express();
  app.use(cors());

- spring boot / fw
  @CrossOrigin 어노테이션을 Controller 클래스에 선언
  
  @Configuration 클래스를 만들고
  
  @Profile("test") 
  @Configuration
   public class WebConfig implements WebMvcConfigurer {
     @Override
     public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("*")
                .allowedMethods("GET", "POST");
    }
  }
resources/application.properties
spring.profiles.active=test

#java -jar xxx.jar --spring.profiles.active=prod

1. todo 목록조회
GET
http://localhost:4500/api/todos

2. todo 1개 조회
GET
http://localhost:4500/api/todos/1

3. todo 등록
POST
http://localhost:4500/api/todos
header 설정
content-type  application/json

body - raw 선택
{
    "item": "Todo4",
    "completed": true
}

4. todo 수정
PUT
http://localhost:4500/api/todos/1

-header 설정
content-type  application/json
-body - raw 선택
{
    "item": "Todo11",
    "completed": true
}

5. todo 삭제
1개 삭제
DELETE
http://localhost:4500/api/todos/4

전체 삭제
DELETE
http://localhost:4500/api/todos


server는 server_express 폴더가 있고
> npm i
> node todo.js

client는 vue-todo-master 폴더가 있고
> npm run serve

개발(Developmemt)과 운영(production)을 위한 설정파일 작성
package.json 파일이 있는 위치와 동일하다
개발
.env.development  
VUE_APP_APIURL=http://localhost:4500

todo.js
const api_url = process.env.VUE_APP_APIURL

운영
.env.production

> npm run build
                                                                                -> TodoHeader 
          main.js  : router/index.js ( / -> Home -> HelloWorld -> TodoList,       /about -> About)
index.html -> App.vue
                       <router-link to="/">Home</router-link>
                       <router-link to="/about">About</router-link>
                  



